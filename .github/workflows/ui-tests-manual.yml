name: UI Tests – Manual (Sauce Labs)

on:
  workflow_dispatch:
    inputs:
      tests_path:
        description: "Pytest path (folder/file::test)"
        type: string
        default: "tests"
      marker:
        description: "Pytest marker/tag (smoke, regression, functional, all)"
        type: choice
        options: [smoke, regression, functional, all]
        default: smoke
      browsers:
        description: "Browsers to run (chrome, firefox, edge, all)"
        type: choice
        options: [chrome, firefox, edge, all]
        default: chrome
      region:
        description: "Sauce region"
        type: choice
        options: [us-west-1, eu-central-1, apac-southeast-1]
        default: eu-central-1
      sauce_platform:
        description: "Platform name"
        type: string
        default: "Windows 11"
      headless:
        description: "Headless (true/false)"
        type: boolean
        default: true
      workers:
        description: "pytest -n (xdist) workers (0 to disable)"
        type: number
        default: 2

concurrency:
  group: ${{ github.workflow }}-${{ github.run_id }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest

    env:
      # Sauce creds from repo secrets
      SAUCE_USERNAME: ${{ secrets.SAUCE_UNAME }}
      SAUCE_ACCESS_KEY: ${{ secrets.SAUCE_KEY }}
      # Common env for your framework (read by your CLI flags)
      SAUCE_PLATFORM: ${{ inputs.sauce_platform }}
      SAUCE_VERSION: latest
      SAUCE_REGION: ${{ inputs.region }}
      HEADLESS: ${{ inputs.headless }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -U pytest selenium pytest-xdist allure-pytest python-dotenv

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Verify Sauce credentials
        run: |
          test -n "${SAUCE_USERNAME}" || (echo "❌ SAUCE_USERNAME missing"; exit 1)
          test -n "${SAUCE_ACCESS_KEY}" || (echo "❌ SAUCE_ACCESS_KEY missing"; exit 1)
          echo "✅ Sauce credentials available"

      - name: Compute browser list
        id: browsers
        run: |
          if [ "${{ inputs.browsers }}" = "all" ]; then
            echo 'json=["chrome","firefox","edge"]' >> $GITHUB_OUTPUT
          else
            echo 'json=["${{ inputs.browsers }}"]' >> $GITHUB_OUTPUT
          fi

      - name: Create result folders
        run: |
          mkdir -p reports
          mkdir -p allure-results

      - name: Run per-browser (marker-aware)
        run: |
          python - <<'PY'
          import json, os, subprocess, sys, shlex

          browsers = json.loads(os.environ["BROWSERS_JSON"])
          tests_path = os.environ["TESTS"]
          marker = os.environ["MARKER"]
          region = os.environ["REGION"]
          headless = str(os.environ.get("HEADLESS", "")).lower()
          workers = str(os.environ.get("WORKERS", "0"))

          for b in browsers:
              print(f"\n=== Running on {b} ===", flush=True)

              # Build pytest command
              cmd = ["pytest", "-v", tests_path]

              # Marker handling: "all" => no -m filter
              if marker and marker.lower() != "all":
                  cmd += ["-m", marker]

              # xdist workers
              if workers and workers != "0":
                  cmd += ["-n", workers]

              # Common CLI flags expected by your framework
              cmd += [
                  "--remote", "--cloud", "saucelabs",
                  "--browser", b,
                  "--sauce-region", region,
                  "--junitxml", f"reports/junit-{b}-{marker}.xml",
                  "--alluredir", f"allure-results/{b}-{marker}"
              ]

              # Optional headless
              if headless in ("1", "true", "yes"):
                  cmd += ["--headless"]

              print("CMD:", " ".join(shlex.quote(c) for c in cmd), flush=True)
              rc = subprocess.call(cmd)
              if rc != 0:
                  sys.exit(rc)
          PY
        env:
          BROWSERS_JSON: ${{ steps.browsers.outputs.json }}
          TESTS: ${{ inputs.tests_path }}
          MARKER: ${{ inputs.marker }}
          REGION: ${{ inputs.region }}
          HEADLESS: ${{ inputs.headless }}
          WORKERS: ${{ inputs.workers }}

      - name: Upload JUnit XML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "junit-${{ inputs.marker }}"
          path: reports/*.xml
          if-no-files-found: ignore

      - name: Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: "allure-results-${{ inputs.marker }}"
          path: allure-results
          if-no-files-found: ignore
