import { CiType } from "@allurereport/core-api";
import { getEnv } from "../utils.js";
const AMAZON_REGEXP = /^arn:aws:codebuild:([^:]+):([\d]+):(?:build|build-batch)\/([^:]+):([\da-f-]+)$/;
const PIPELINE_REGEXP = /^(?:codepipeline\/)(.+)$/;
export const parseArnValues = (source) => {
    if (!source) {
        return [];
    }
    return source.match(AMAZON_REGEXP)?.slice(1) ?? [];
};
export const isBatchBuild = () => getEnv("CODEBUILD_BUILD_BATCH_TRIGGERED") === "true";
export const getRegionID = (source) => parseArnValues(source)?.[0] ?? "";
export const getAccountID = (source) => parseArnValues(source)?.[1] ?? "";
export const getProjectName = (source) => parseArnValues(source)?.[2] ?? "";
export const getBuildGUID = (source) => parseArnValues(source)?.[3] ?? "";
export const getInitiator = () => getEnv("CODEBUILD_INITIATOR");
export const getPipelineName = () => {
    const initiator = getInitiator();
    if (!initiator) {
        return "";
    }
    return initiator.match(PIPELINE_REGEXP)?.[1] ?? "";
};
export const amazon = {
    type: CiType.Amazon,
    get detected() {
        const buildArn = getEnv("CODEBUILD_BUILD_ARN");
        return buildArn !== "" && parseArnValues(buildArn).length > 0;
    },
    get jobUid() {
        const buildArn = getEnv("CODEBUILD_BUILD_ARN");
        const pipelineName = getPipelineName();
        if (pipelineName) {
            return `pipeline/${pipelineName}`;
        }
        else if (isBatchBuild()) {
            const projectName = getProjectName(buildArn);
            return `buildbatch/${projectName}`;
        }
        else {
            const projectName = getProjectName(buildArn);
            return `build/${projectName}`;
        }
    },
    get jobUrl() {
        const buildArn = getEnv("CODEBUILD_BUILD_ARN");
        const pipelineName = getPipelineName();
        if (pipelineName) {
            const regionId = getRegionID(buildArn);
            return `https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${pipelineName}/view?region=${regionId}`;
        }
        else {
            const regionId = getRegionID(buildArn);
            const projectName = getProjectName(buildArn);
            return `https://console.aws.amazon.com/codebuild/home?region=${regionId}#/projects/${projectName}/view/new`;
        }
    },
    get jobName() {
        const buildArn = getEnv("CODEBUILD_BUILD_ARN");
        const pipelineName = getPipelineName();
        if (pipelineName) {
            return pipelineName;
        }
        else {
            return getProjectName(buildArn);
        }
    },
    get jobRunUid() {
        const pipelineName = getPipelineName();
        if (pipelineName) {
            return getEnv("CODEBUILD_BUILD_ID");
        }
        else {
            return getBuildGUID(getEnv("CODEBUILD_BUILD_ARN"));
        }
    },
    get jobRunUrl() {
        const pipelineName = getPipelineName();
        if (pipelineName) {
            const buildArn = getEnv("CODEBUILD_BUILD_ARN");
            const executionGuid = getEnv("CODEBUILD_BUILD_ID") || "";
            const regionId = getRegionID(buildArn);
            return `https://console.aws.amazon.com/codesuite/codepipeline/pipelines/${pipelineName}/executions/${executionGuid}/timeline?region=${regionId}`;
        }
        else if (isBatchBuild()) {
            const buildArn = getEnv("CODEBUILD_BUILD_ARN");
            const accountId = getAccountID(buildArn);
            const projectName = getProjectName(buildArn);
            const buildGuid = getBuildGUID(buildArn);
            return `https://console.aws.amazon.com/codesuite/codebuild/${accountId}/projects/${projectName}/batch/${projectName}:${buildGuid}`;
        }
        else {
            const buildArn = getEnv("CODEBUILD_BUILD_ARN");
            const regionId = getRegionID(buildArn);
            const projectName = getProjectName(buildArn);
            const buildGuid = getBuildGUID(buildArn);
            return `https://console.aws.amazon.com/codebuild/home?region=${regionId}#/builds/${projectName}:${buildGuid}/view/new`;
        }
    },
    get jobRunName() {
        const pipelineName = getPipelineName();
        if (pipelineName) {
            const executionGuid = getEnv("CODEBUILD_BUILD_ID");
            return `${pipelineName}-${executionGuid}`;
        }
        else {
            const projectName = getProjectName(getEnv("CODEBUILD_BUILD_ARN"));
            const buildNumber = getEnv("CODEBUILD_BUILD_NUMBER");
            return `${projectName}-${buildNumber}`;
        }
    },
    get jobRunBranch() {
        const sourceVersion = getEnv("CODEBUILD_SOURCE_VERSION");
        const { branch } = sourceVersion?.match?.(/refs\/heads\/(?<branch>\S+)\^\{(?<commithash>\S+)\}/)?.groups ?? {};
        return branch ?? "";
    },
    get pullRequestUrl() {
        return "";
    },
    get pullRequestName() {
        return "";
    },
};
