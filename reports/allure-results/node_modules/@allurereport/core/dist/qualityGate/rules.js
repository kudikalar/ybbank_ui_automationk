import { filterSuccessful, filterUnsuccessful } from "@allurereport/core-api";
import { bold } from "yoctocolors";
export const maxFailuresRule = {
    rule: "maxFailures",
    message: ({ actual, expected }) => `The number of failed tests ${bold(String(actual))} exceeds the allowed threshold value ${bold(String(expected))}`,
    validate: async ({ trs, knownIssues, expected, state = 0 }) => {
        const knownIssuesHistoryIds = knownIssues.map(({ historyId }) => historyId);
        const unknown = trs.filter((tr) => !tr.historyId || !knownIssuesHistoryIds.includes(tr.historyId));
        const failedTrs = unknown.filter(filterUnsuccessful);
        const actual = failedTrs.length + state;
        return {
            success: actual <= expected,
            actual,
            expected,
        };
    },
};
export const minTestsCountRule = {
    rule: "minTestsCount",
    message: ({ actual, expected }) => `The total number of tests ${bold(String(actual))} is less than the expected threshold value ${bold(String(expected))}`,
    validate: async ({ trs, expected, state = 0 }) => {
        const actual = trs.length + state;
        return {
            success: actual >= expected,
            actual,
            expected,
        };
    },
};
export const successRateRule = {
    rule: "successRate",
    message: ({ actual, expected }) => `Success rate ${bold(String(actual))} is less, than expected ${bold(String(expected))}`,
    validate: async ({ trs, knownIssues, expected }) => {
        const knownIssuesHistoryIds = knownIssues.map(({ historyId }) => historyId);
        const unknown = trs.filter((tr) => !tr.historyId || !knownIssuesHistoryIds.includes(tr.historyId));
        const passedTrs = unknown.filter(filterSuccessful);
        const rate = passedTrs.length === 0 ? 0 : passedTrs.length / unknown.length;
        return {
            success: rate >= expected,
            actual: rate,
            expected,
        };
    },
};
export const qualityGateDefaultRules = [maxFailuresRule, minTestsCountRule, successRateRule];
