import type { KnownTestFailure, TestResult } from "@allurereport/core-api";
import type { ResultFile } from "@allurereport/plugin-api";
import type { FullConfig } from "./api.js";
import { type QualityGateState } from "./qualityGate/index.js";
import { DefaultAllureStore } from "./store/store.js";
import { RealtimeEventsDispatcher, RealtimeSubscriber } from "./utils/event.js";
export declare class AllureReport {
    #private;
    readonly reportUuid: string;
    reportUrl?: string;
    constructor(opts: FullConfig);
    get hasQualityGate(): boolean;
    get store(): DefaultAllureStore;
    get realtimeSubscriber(): RealtimeSubscriber;
    get realtimeDispatcher(): RealtimeEventsDispatcher;
    readDirectory: (resultsDir: string) => Promise<void>;
    readFile: (resultsFile: string) => Promise<void>;
    readResult: (data: ResultFile) => Promise<void>;
    validate: (params: {
        trs: TestResult[];
        knownIssues: KnownTestFailure[];
        state?: QualityGateState;
    }) => Promise<{
        fastFailed: boolean;
        results: import("@allurereport/plugin-api").QualityGateValidationResult[];
    }>;
    start: () => Promise<void>;
    done: () => Promise<void>;
}
