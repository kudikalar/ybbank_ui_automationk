var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DefaultAllureStore_testResults, _DefaultAllureStore_attachments, _DefaultAllureStore_attachmentContents, _DefaultAllureStore_testCases, _DefaultAllureStore_metadata, _DefaultAllureStore_history, _DefaultAllureStore_known, _DefaultAllureStore_fixtures, _DefaultAllureStore_defaultLabels, _DefaultAllureStore_environmentsConfig, _DefaultAllureStore_reportVariables, _DefaultAllureStore_realtimeDispatcher, _DefaultAllureStore_realtimeSubscriber, _DefaultAllureStore_globalAttachments, _DefaultAllureStore_globalErrors, _DefaultAllureStore_globalExitCode, _DefaultAllureStore_qualityGateResultsByRules, _DefaultAllureStore_historyPoints, _DefaultAllureStore_repoData;
import { compareBy, getWorstStatus, matchEnvironment, nullsLast, ordinal, reverse, } from "@allurereport/core-api";
import { md5, } from "@allurereport/plugin-api";
import { isFlaky } from "../utils/flaky.js";
import { getGitBranch, getGitRepoName } from "../utils/git.js";
import { getStatusTransition } from "../utils/new.js";
import { getTestResultsStats } from "../utils/stats.js";
import { testFixtureResultRawToState, testResultRawToState } from "./convert.js";
const index = (indexMap, key, ...items) => {
    if (key) {
        if (!indexMap.has(key)) {
            indexMap.set(key, []);
        }
        const current = indexMap.get(key);
        current.push(...items);
    }
};
export class DefaultAllureStore {
    constructor(params) {
        _DefaultAllureStore_testResults.set(this, void 0);
        _DefaultAllureStore_attachments.set(this, void 0);
        _DefaultAllureStore_attachmentContents.set(this, void 0);
        _DefaultAllureStore_testCases.set(this, void 0);
        _DefaultAllureStore_metadata.set(this, void 0);
        _DefaultAllureStore_history.set(this, void 0);
        _DefaultAllureStore_known.set(this, void 0);
        _DefaultAllureStore_fixtures.set(this, void 0);
        _DefaultAllureStore_defaultLabels.set(this, {});
        _DefaultAllureStore_environmentsConfig.set(this, {});
        _DefaultAllureStore_reportVariables.set(this, {});
        _DefaultAllureStore_realtimeDispatcher.set(this, void 0);
        _DefaultAllureStore_realtimeSubscriber.set(this, void 0);
        this.indexTestResultByTestCase = new Map();
        this.indexTestResultByHistoryId = new Map();
        this.indexAttachmentByTestResult = new Map();
        this.indexAttachmentByFixture = new Map();
        this.indexFixturesByTestResult = new Map();
        this.indexKnownByHistoryId = new Map();
        _DefaultAllureStore_globalAttachments.set(this, []);
        _DefaultAllureStore_globalErrors.set(this, []);
        _DefaultAllureStore_globalExitCode.set(this, void 0);
        _DefaultAllureStore_qualityGateResultsByRules.set(this, {});
        _DefaultAllureStore_historyPoints.set(this, []);
        _DefaultAllureStore_repoData.set(this, void 0);
        const { history, known = [], realtimeDispatcher, realtimeSubscriber, defaultLabels = {}, environmentsConfig = {}, reportVariables = {}, } = params ?? {};
        __classPrivateFieldSet(this, _DefaultAllureStore_testResults, new Map(), "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_attachments, new Map(), "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_attachmentContents, new Map(), "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_testCases, new Map(), "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_metadata, new Map(), "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_fixtures, new Map(), "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_history, history, "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_known, [...known], "f");
        __classPrivateFieldGet(this, _DefaultAllureStore_known, "f").forEach((ktf) => index(this.indexKnownByHistoryId, ktf.historyId, ktf));
        __classPrivateFieldSet(this, _DefaultAllureStore_realtimeDispatcher, realtimeDispatcher, "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_realtimeSubscriber, realtimeSubscriber, "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_defaultLabels, defaultLabels, "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_environmentsConfig, environmentsConfig, "f");
        __classPrivateFieldSet(this, _DefaultAllureStore_reportVariables, reportVariables, "f");
        this.indexLatestEnvTestResultByHistoryId = new Map();
        Object.keys(__classPrivateFieldGet(this, _DefaultAllureStore_environmentsConfig, "f"))
            .concat("default")
            .forEach((key) => {
            this.indexLatestEnvTestResultByHistoryId.set(key, new Map());
        });
        __classPrivateFieldGet(this, _DefaultAllureStore_realtimeSubscriber, "f")?.onQualityGateResults(async (results) => {
            results.forEach((result) => {
                __classPrivateFieldGet(this, _DefaultAllureStore_qualityGateResultsByRules, "f")[result.rule] = result;
            });
        });
        __classPrivateFieldGet(this, _DefaultAllureStore_realtimeSubscriber, "f")?.onGlobalExitCode(async (exitCode) => {
            __classPrivateFieldSet(this, _DefaultAllureStore_globalExitCode, exitCode, "f");
        });
        __classPrivateFieldGet(this, _DefaultAllureStore_realtimeSubscriber, "f")?.onGlobalError(async (error) => {
            __classPrivateFieldGet(this, _DefaultAllureStore_globalErrors, "f").push(error);
        });
        __classPrivateFieldGet(this, _DefaultAllureStore_realtimeSubscriber, "f")?.onGlobalAttachment(async (attachment) => {
            const attachmentLink = {
                id: md5(attachment.getOriginalFileName()),
                missed: false,
                used: false,
                ext: attachment.getExtension(),
                originalFileName: attachment.getOriginalFileName(),
                contentType: attachment.getContentType(),
                contentLength: attachment.getContentLength(),
            };
            __classPrivateFieldGet(this, _DefaultAllureStore_attachmentContents, "f").set(attachmentLink.id, attachment);
            __classPrivateFieldGet(this, _DefaultAllureStore_globalAttachments, "f").push(attachmentLink);
        });
    }
    async readHistory() {
        if (!__classPrivateFieldGet(this, _DefaultAllureStore_history, "f")) {
            return [];
        }
        const repoData = await this.repoData();
        __classPrivateFieldSet(this, _DefaultAllureStore_historyPoints, (await __classPrivateFieldGet(this, _DefaultAllureStore_history, "f").readHistory(repoData?.branch)) ?? [], "f");
        __classPrivateFieldGet(this, _DefaultAllureStore_historyPoints, "f").sort(compareBy("timestamp", reverse(ordinal())));
        return __classPrivateFieldGet(this, _DefaultAllureStore_historyPoints, "f");
    }
    async appendHistory(history) {
        if (!__classPrivateFieldGet(this, _DefaultAllureStore_history, "f")) {
            return;
        }
        const repoData = await this.repoData();
        __classPrivateFieldGet(this, _DefaultAllureStore_historyPoints, "f").push(history);
        await __classPrivateFieldGet(this, _DefaultAllureStore_history, "f").appendHistory(history, repoData?.branch);
    }
    async repoData() {
        if (__classPrivateFieldGet(this, _DefaultAllureStore_repoData, "f")) {
            return __classPrivateFieldGet(this, _DefaultAllureStore_repoData, "f");
        }
        try {
            __classPrivateFieldSet(this, _DefaultAllureStore_repoData, {
                name: await getGitRepoName(),
                branch: await getGitBranch(),
            }, "f");
            return __classPrivateFieldGet(this, _DefaultAllureStore_repoData, "f");
        }
        catch (err) {
            return undefined;
        }
    }
    async qualityGateResults() {
        return Object.values(__classPrivateFieldGet(this, _DefaultAllureStore_qualityGateResultsByRules, "f"));
    }
    async globalExitCode() {
        return __classPrivateFieldGet(this, _DefaultAllureStore_globalExitCode, "f");
    }
    async allGlobalErrors() {
        return __classPrivateFieldGet(this, _DefaultAllureStore_globalErrors, "f");
    }
    async allGlobalAttachments() {
        return __classPrivateFieldGet(this, _DefaultAllureStore_globalAttachments, "f");
    }
    async visitTestResult(raw, context) {
        const attachmentLinks = [];
        const testResult = testResultRawToState({
            testCases: __classPrivateFieldGet(this, _DefaultAllureStore_testCases, "f"),
            attachments: __classPrivateFieldGet(this, _DefaultAllureStore_attachments, "f"),
            visitAttachmentLink: (link) => attachmentLinks.push(link),
        }, raw, context);
        const defaultLabelsNames = Object.keys(__classPrivateFieldGet(this, _DefaultAllureStore_defaultLabels, "f"));
        if (defaultLabelsNames.length) {
            defaultLabelsNames.forEach((labelName) => {
                if (!testResult.labels.find((label) => label.name === labelName)) {
                    const defaultLabelValue = __classPrivateFieldGet(this, _DefaultAllureStore_defaultLabels, "f")[labelName];
                    [].concat(defaultLabelValue).forEach((labelValue) => {
                        testResult.labels.push({
                            name: labelName,
                            value: labelValue,
                        });
                    });
                }
            });
        }
        testResult.environment = matchEnvironment(__classPrivateFieldGet(this, _DefaultAllureStore_environmentsConfig, "f"), testResult);
        const trHistory = await this.historyByTr(testResult);
        testResult.transition = getStatusTransition(testResult, trHistory);
        testResult.flaky = isFlaky(testResult, trHistory);
        __classPrivateFieldGet(this, _DefaultAllureStore_testResults, "f").set(testResult.id, testResult);
        if (testResult.historyId) {
            const maybeOther = this.indexLatestEnvTestResultByHistoryId
                .get(testResult.environment)
                .get(testResult.historyId);
            if (maybeOther) {
                if (maybeOther.start === undefined || testResult.start === undefined || maybeOther.start < testResult.start) {
                    this.indexLatestEnvTestResultByHistoryId.get(testResult.environment).set(testResult.historyId, testResult);
                    maybeOther.hidden = true;
                }
                else {
                    testResult.hidden = true;
                }
            }
            else {
                this.indexLatestEnvTestResultByHistoryId.get(testResult.environment).set(testResult.historyId, testResult);
            }
        }
        index(this.indexTestResultByTestCase, testResult.testCase?.id, testResult);
        index(this.indexTestResultByHistoryId, testResult.historyId, testResult);
        index(this.indexAttachmentByTestResult, testResult.id, ...attachmentLinks);
        __classPrivateFieldGet(this, _DefaultAllureStore_realtimeDispatcher, "f")?.sendTestResult(testResult.id);
    }
    async visitTestFixtureResult(result, context) {
        const attachmentLinks = [];
        const testFixtureResult = testFixtureResultRawToState({
            attachments: __classPrivateFieldGet(this, _DefaultAllureStore_attachments, "f"),
            visitAttachmentLink: (link) => attachmentLinks.push(link),
        }, result, context);
        __classPrivateFieldGet(this, _DefaultAllureStore_fixtures, "f").set(testFixtureResult.id, testFixtureResult);
        testFixtureResult.testResultIds.forEach((trId) => {
            index(this.indexFixturesByTestResult, trId, testFixtureResult);
        });
        index(this.indexAttachmentByFixture, testFixtureResult.id, ...attachmentLinks);
        __classPrivateFieldGet(this, _DefaultAllureStore_realtimeDispatcher, "f")?.sendTestFixtureResult(testFixtureResult.id);
    }
    async visitAttachmentFile(resultFile, context) {
        const originalFileName = resultFile.getOriginalFileName();
        const id = md5(originalFileName);
        __classPrivateFieldGet(this, _DefaultAllureStore_attachmentContents, "f").set(id, resultFile);
        const maybeLink = __classPrivateFieldGet(this, _DefaultAllureStore_attachments, "f").get(id);
        if (maybeLink) {
            const link = maybeLink;
            link.missed = false;
            link.ext = link.ext === undefined || link.ext === "" ? resultFile.getExtension() : link.ext;
            link.contentType = link.contentType ?? resultFile.getContentType();
            link.contentLength = resultFile.getContentLength();
        }
        else {
            __classPrivateFieldGet(this, _DefaultAllureStore_attachments, "f").set(id, {
                used: false,
                missed: false,
                id,
                originalFileName,
                ext: resultFile.getExtension(),
                contentType: resultFile.getContentType(),
                contentLength: resultFile.getContentLength(),
            });
        }
        __classPrivateFieldGet(this, _DefaultAllureStore_realtimeDispatcher, "f")?.sendAttachmentFile(id);
    }
    async visitMetadata(metadata) {
        Object.keys(metadata).forEach((key) => __classPrivateFieldGet(this, _DefaultAllureStore_metadata, "f").set(key, metadata[key]));
    }
    async allTestCases() {
        return Array.from(__classPrivateFieldGet(this, _DefaultAllureStore_testCases, "f").values());
    }
    async allTestResults(options = { includeHidden: false }) {
        const { includeHidden } = options;
        const result = Array.from(__classPrivateFieldGet(this, _DefaultAllureStore_testResults, "f").values());
        return includeHidden ? result : result.filter((tr) => !tr.hidden);
    }
    async allAttachments(options = {}) {
        const { includeMissed = false, includeUnused = false } = options;
        const attachments = Array.from(__classPrivateFieldGet(this, _DefaultAllureStore_attachments, "f").values());
        return attachments
            .filter((link) => (!includeMissed ? !link.missed : true))
            .filter((link) => (!includeUnused ? link.used : true));
    }
    async allMetadata() {
        const result = {};
        __classPrivateFieldGet(this, _DefaultAllureStore_metadata, "f").forEach((value, key) => (result[key] = value));
        return result;
    }
    async allFixtures() {
        return Array.from(__classPrivateFieldGet(this, _DefaultAllureStore_fixtures, "f").values());
    }
    async allHistoryDataPoints() {
        return __classPrivateFieldGet(this, _DefaultAllureStore_historyPoints, "f");
    }
    async allKnownIssues() {
        return __classPrivateFieldGet(this, _DefaultAllureStore_known, "f");
    }
    async allNewTestResults() {
        const allTrs = await this.allTestResults();
        const allHistoryDps = await this.allHistoryDataPoints();
        return allTrs.filter((tr) => {
            if (!tr.historyId) {
                return true;
            }
            return !allHistoryDps.some((dp) => dp.testResults[tr.historyId]);
        });
    }
    async testCaseById(tcId) {
        return __classPrivateFieldGet(this, _DefaultAllureStore_testCases, "f").get(tcId);
    }
    async testResultById(trId) {
        return __classPrivateFieldGet(this, _DefaultAllureStore_testResults, "f").get(trId);
    }
    async attachmentById(attachmentId) {
        return __classPrivateFieldGet(this, _DefaultAllureStore_attachments, "f").get(attachmentId);
    }
    async attachmentContentById(attachmentId) {
        return __classPrivateFieldGet(this, _DefaultAllureStore_attachmentContents, "f").get(attachmentId);
    }
    async metadataByKey(key) {
        return __classPrivateFieldGet(this, _DefaultAllureStore_metadata, "f").get(key);
    }
    async testResultsByTcId(tcId) {
        return this.indexTestResultByTestCase.get(tcId) ?? [];
    }
    async attachmentsByTrId(trId) {
        return this.indexAttachmentByTestResult.get(trId) ?? [];
    }
    async retriesByTr(tr) {
        if (!tr || tr.hidden || !tr.historyId) {
            return [];
        }
        return (this.indexTestResultByHistoryId.get(tr.historyId) ?? [])
            .filter((r) => r.hidden)
            .sort(nullsLast(compareBy("start", reverse(ordinal()))));
    }
    async retriesByTrId(trId) {
        const tr = await this.testResultById(trId);
        return tr ? this.retriesByTr(tr) : [];
    }
    async historyByTr(tr) {
        if (!tr?.historyId) {
            return [];
        }
        return [...__classPrivateFieldGet(this, _DefaultAllureStore_historyPoints, "f")]
            .filter((dp) => !!dp.testResults[tr.historyId])
            .map((dp) => {
            if (!dp.url) {
                return dp.testResults[tr.historyId];
            }
            const url = new URL(dp.url);
            url.hash = tr.id;
            return {
                ...dp.testResults[tr.historyId],
                url: url.toString(),
            };
        });
    }
    async historyByTrId(trId) {
        const tr = await this.testResultById(trId);
        return tr ? this.historyByTr(tr) : [];
    }
    async fixturesByTrId(trId) {
        return this.indexFixturesByTestResult.get(trId) ?? [];
    }
    async failedTestResults() {
        const allTestResults = await this.allTestResults();
        return allTestResults.filter(({ status }) => status === "failed" || status === "broken");
    }
    async unknownFailedTestResults() {
        const failedTestResults = await this.failedTestResults();
        if (!__classPrivateFieldGet(this, _DefaultAllureStore_known, "f")?.length) {
            return failedTestResults;
        }
        const knownHistoryIds = __classPrivateFieldGet(this, _DefaultAllureStore_known, "f").map((ktf) => ktf.historyId);
        return failedTestResults.filter(({ historyId }) => historyId && !knownHistoryIds.includes(historyId));
    }
    async testResultsByLabel(labelName) {
        const results = {
            _: [],
        };
        const all = await this.allTestResults();
        all.forEach((test) => {
            const targetLabels = (test.labels ?? []).filter((label) => label.name === labelName);
            if (targetLabels.length === 0) {
                results._.push(test);
                return;
            }
            targetLabels.forEach((label) => {
                if (!results[label.value]) {
                    results[label.value] = [];
                }
                results[label.value].push(test);
            });
        });
        return results;
    }
    async testsStatistic(filter) {
        const all = await this.allTestResults();
        const allWithStats = await Promise.all(all.map(async (tr) => {
            const retries = await this.retriesByTr(tr);
            return {
                ...tr,
                retries,
            };
        }));
        return getTestResultsStats(allWithStats, filter);
    }
    async allEnvironments() {
        return Array.from(new Set(["default", ...Object.keys(__classPrivateFieldGet(this, _DefaultAllureStore_environmentsConfig, "f"))]));
    }
    async testResultsByEnvironment(env, options = { includeHidden: false }) {
        const allTrs = await this.allTestResults(options);
        return allTrs.filter((tr) => tr.environment === env);
    }
    async allTestEnvGroups() {
        const allTr = await this.allTestResults({ includeHidden: true });
        const trByTestCaseId = allTr.reduce((acc, tr) => {
            const testCaseId = tr?.testCase?.id;
            if (!testCaseId) {
                return acc;
            }
            if (acc[testCaseId]) {
                acc[testCaseId].push(tr);
            }
            else {
                acc[testCaseId] = [tr];
            }
            return acc;
        }, {});
        return Object.entries(trByTestCaseId).reduce((acc, [testCaseId, trs]) => {
            if (trs.length === 0) {
                return acc;
            }
            const { fullName, name } = trs[0];
            const envGroup = {
                id: testCaseId,
                fullName,
                name,
                status: getWorstStatus(trs.map(({ status }) => status)) ?? "passed",
                testResultsByEnv: {},
            };
            trs.forEach((tr) => {
                const env = matchEnvironment(__classPrivateFieldGet(this, _DefaultAllureStore_environmentsConfig, "f"), tr);
                envGroup.testResultsByEnv[env] = tr.id;
            });
            acc.push(envGroup);
            return acc;
        }, []);
    }
    async allVariables() {
        return __classPrivateFieldGet(this, _DefaultAllureStore_reportVariables, "f");
    }
    async envVariables(env) {
        return {
            ...__classPrivateFieldGet(this, _DefaultAllureStore_reportVariables, "f"),
            ...(__classPrivateFieldGet(this, _DefaultAllureStore_environmentsConfig, "f")?.[env]?.variables ?? {}),
        };
    }
}
_DefaultAllureStore_testResults = new WeakMap(), _DefaultAllureStore_attachments = new WeakMap(), _DefaultAllureStore_attachmentContents = new WeakMap(), _DefaultAllureStore_testCases = new WeakMap(), _DefaultAllureStore_metadata = new WeakMap(), _DefaultAllureStore_history = new WeakMap(), _DefaultAllureStore_known = new WeakMap(), _DefaultAllureStore_fixtures = new WeakMap(), _DefaultAllureStore_defaultLabels = new WeakMap(), _DefaultAllureStore_environmentsConfig = new WeakMap(), _DefaultAllureStore_reportVariables = new WeakMap(), _DefaultAllureStore_realtimeDispatcher = new WeakMap(), _DefaultAllureStore_realtimeSubscriber = new WeakMap(), _DefaultAllureStore_globalAttachments = new WeakMap(), _DefaultAllureStore_globalErrors = new WeakMap(), _DefaultAllureStore_globalExitCode = new WeakMap(), _DefaultAllureStore_qualityGateResultsByRules = new WeakMap(), _DefaultAllureStore_historyPoints = new WeakMap(), _DefaultAllureStore_repoData = new WeakMap();
