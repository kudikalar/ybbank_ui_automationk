import type { TestError } from "@allurereport/core-api";
import type { BatchOptions, ExitCode, QualityGateValidationResult, RealtimeEventsDispatcher as RealtimeEventsDispatcherType, RealtimeSubscriber as RealtimeSubscriberType, ResultFile } from "@allurereport/plugin-api";
import type { EventEmitter } from "node:events";
export declare enum RealtimeEvents {
    TestResult = "testResult",
    TestFixtureResult = "testFixtureResult",
    AttachmentFile = "attachmentFile",
    QualityGateResults = "qualityGateResults",
    GlobalAttachment = "globalAttachment",
    GlobalError = "globalError",
    GlobalExitCode = "globalExitCode"
}
export interface AllureStoreEvents {
    [RealtimeEvents.QualityGateResults]: [QualityGateValidationResult[]];
    [RealtimeEvents.TestResult]: [string];
    [RealtimeEvents.TestFixtureResult]: [string];
    [RealtimeEvents.AttachmentFile]: [string];
    [RealtimeEvents.GlobalAttachment]: [ResultFile];
    [RealtimeEvents.GlobalExitCode]: [ExitCode];
    [RealtimeEvents.GlobalError]: [TestError];
}
export declare class RealtimeEventsDispatcher implements RealtimeEventsDispatcherType {
    #private;
    constructor(emitter: EventEmitter<AllureStoreEvents>);
    sendGlobalAttachment(attachment: ResultFile): void;
    sendGlobalExitCode(codes: ExitCode): void;
    sendGlobalError(error: TestError): void;
    sendQualityGateResults(payload: QualityGateValidationResult[]): void;
    sendTestResult(trId: string): void;
    sendTestFixtureResult(tfrId: string): void;
    sendAttachmentFile(afId: string): void;
}
export declare class RealtimeSubscriber implements RealtimeSubscriberType {
    #private;
    constructor(emitter: EventEmitter<AllureStoreEvents>);
    onGlobalAttachment(listener: (attachment: ResultFile) => Promise<void>): () => void;
    onGlobalExitCode(listener: (payload: ExitCode) => Promise<void>): () => void;
    onGlobalError(listener: (error: TestError) => Promise<void>): () => void;
    onQualityGateResults(listener: (payload: QualityGateValidationResult[]) => Promise<void>): () => void;
    onTestResults(listener: (trIds: string[]) => Promise<void>, options?: BatchOptions): () => void;
    onTestFixtureResults(listener: (tfrIds: string[]) => Promise<void>, options?: BatchOptions): () => void;
    onAttachmentFiles(listener: (afIds: string[]) => Promise<void>, options?: BatchOptions): () => void;
    onAll(listener: () => Promise<void>, options?: BatchOptions): () => void;
    offAll(): void;
}
