import type { BaseTrendSliceMetadata, ChartId, ChartType, HistoryDataPoint, PieSlice, SeverityLevel, Statistic, TestResult, TestStatus, TrendPoint, TrendPointId, TrendSlice, TrendSliceId } from "@allurereport/core-api";
import { ChartDataType, ChartMode } from "@allurereport/core-api";
import type { PluginContext } from "./plugin.js";
export type ExecutionIdFn = (executionOrder: number) => string;
export type ExecutionNameFn = (executionOrder: number) => string;
export type TrendMetadataFnOverrides = {
    executionIdAccessor?: ExecutionIdFn;
    executionNameAccessor?: ExecutionNameFn;
};
export type TrendDataType = TestStatus | SeverityLevel;
export type TrendCalculationResult<T extends TrendDataType> = {
    points: Record<TrendPointId, TrendPoint>;
    series: Record<T, TrendPointId[]>;
};
export interface GenericTrendChartData<SeriesType extends string, Metadata extends BaseTrendSliceMetadata = BaseTrendSliceMetadata> {
    type: ChartType.Trend;
    dataType: ChartDataType;
    mode: ChartMode;
    title?: string;
    points: Record<TrendPointId, TrendPoint>;
    slices: Record<TrendSliceId, TrendSlice<Metadata>>;
    series: Record<SeriesType, TrendPointId[]>;
    min: number;
    max: number;
}
export type StatusTrendChartData = GenericTrendChartData<TestStatus>;
export type SeverityTrendChartData = GenericTrendChartData<SeverityLevel>;
export type TrendChartData = StatusTrendChartData | SeverityTrendChartData;
export type GeneratedChartData = TrendChartData | PieChartData | ComingSoonChartData;
export type GeneratedChartsData = Record<ChartId, GeneratedChartData>;
export type TrendStats<T extends TrendDataType> = Record<T, number>;
export type TrendChartOptions = {
    type: ChartType.Trend;
    dataType: ChartDataType;
    mode?: ChartMode;
    title?: string;
    limit?: number;
    metadata?: TrendMetadataFnOverrides;
};
export type PieChartOptions = {
    type: ChartType.Pie;
    title?: string;
};
export type ComingSoonChartOptions = {
    type: ChartType.HeatMap | ChartType.Bar | ChartType.Funnel | ChartType.TreeMap;
    title?: string;
};
export type ChartOptions = TrendChartOptions | PieChartOptions | ComingSoonChartOptions;
export interface PieChartData {
    type: ChartType.Pie;
    title?: string;
    slices: PieSlice[];
    percentage: number;
}
export interface ComingSoonChartData {
    type: ChartType.HeatMap | ChartType.Bar | ChartType.Funnel | ChartType.TreeMap;
    title?: string;
}
export declare const createEmptySeries: <T extends TrendDataType>(items: readonly T[]) => Record<T, string[]>;
export declare const calculatePercentValues: <T extends TrendDataType>(stats: Record<T, number>, executionId: string, itemType: readonly T[]) => TrendCalculationResult<T>;
export declare const getTrendDataGeneric: <T extends TrendDataType, M extends BaseTrendSliceMetadata>(stats: Record<T, number>, reportName: string, executionOrder: number, itemType: readonly T[], chartOptions: TrendChartOptions) => GenericTrendChartData<T, M>;
export declare const createEmptyStats: <T extends TrendDataType>(items: readonly T[]) => TrendStats<T>;
export declare const normalizeStatistic: <T extends TrendDataType>(statistic: Partial<TrendStats<T>>, itemType: readonly T[]) => TrendStats<T>;
export declare const mergeTrendDataGeneric: <T extends TrendDataType, M extends BaseTrendSliceMetadata>(trendData: GenericTrendChartData<T, M>, trendDataPart: GenericTrendChartData<T, M>, itemType: readonly T[]) => GenericTrendChartData<T, M>;
export declare const DEFAULT_CHART_HISTORY_LIMIT = 10;
export declare const getPieChartData: (stats: Statistic, chartOptions: PieChartOptions) => PieChartData;
export declare const generatePieChart: (options: PieChartOptions, stores: {
    statistic: Statistic;
}) => PieChartData;
export declare const generateComingSoonChart: (options: ComingSoonChartOptions) => ComingSoonChartData;
export interface TrendDataAccessor<T extends TrendDataType> {
    getCurrentData: (trs: TestResult[], stats: Statistic) => TrendStats<T>;
    getHistoricalData: (historyPoint: HistoryDataPoint) => TrendStats<T>;
    getAllValues: () => readonly T[];
}
export declare const generateTrendChartGeneric: <T extends TrendDataType>(options: TrendChartOptions, stores: {
    trs: TestResult[];
    statistic: Statistic;
    history: HistoryDataPoint[];
}, context: PluginContext, dataAccessor: TrendDataAccessor<T>) => GenericTrendChartData<T> | undefined;
export declare const generateTrendChart: (options: TrendChartOptions, stores: {
    trs: TestResult[];
    statistic: Statistic;
    history: HistoryDataPoint[];
}, context: PluginContext) => TrendChartData | undefined;
