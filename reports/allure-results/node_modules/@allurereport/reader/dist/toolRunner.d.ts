import type { Unknown } from "./validation.js";
export type ProcessRunOptions = {
    exitCode?: number | ((code: number) => boolean);
    encoding?: BufferEncoding;
    stderrEncoding?: BufferEncoding;
    timeout?: number;
    timeoutSignal?: NodeJS.Signals;
    ignoreStderr?: boolean;
};
export declare const invokeCliTool: (executable: string, args: readonly string[], { timeout, timeoutSignal, ignoreStderr, encoding, exitCode: expectedExitCode }?: ProcessRunOptions) => Promise<void>;
type ResolveCliOutput<T> = T extends {
    encoding: BufferEncoding;
} ? string : Buffer;
export declare const invokeStdoutCliTool: <T extends ProcessRunOptions | undefined>(executable: string, args: readonly string[], options?: T) => AsyncGenerator<ResolveCliOutput<T>, void, unknown>;
export declare const invokeTextStdoutCliTool: (executable: string, args: readonly string[], options?: ProcessRunOptions) => AsyncGenerator<string, void, unknown>;
export declare const invokeJsonCliTool: <T>(tool: string, args: readonly string[], options?: ProcessRunOptions) => Promise<Unknown<T>>;
export {};
