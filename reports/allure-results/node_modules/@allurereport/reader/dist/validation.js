const unknownKey = Symbol("This must be an Unknown<T>");
export const isDefined = (value) => typeof value !== "undefined";
export const isString = (value) => typeof value === "string";
export const isNumber = (value) => typeof value === "number";
export const isBoolean = (value) => typeof value === "boolean";
export const isArray = (value) => Array.isArray(value);
export const isObject = (value) => typeof value === "object" && value !== null && !Array.isArray(value);
export const isLiteral = (value, literals) => literals.includes(value);
export const ensureString = (value) => typeof value === "string" ? value : undefined;
export const ensureNumber = (value) => typeof value === "number" ? value : undefined;
export const ensureBoolean = (value) => typeof value === "boolean" ? value : undefined;
export const ensureInt = (value) => {
    if (typeof value === "number") {
        return Math.floor(value);
    }
    if (typeof value === "string") {
        const parsed = parseInt(value, 10);
        if (!isNaN(parsed)) {
            return parsed;
        }
    }
};
export const ensureFloat = (value) => {
    if (typeof value === "number") {
        return value;
    }
    if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!isNaN(parsed)) {
            return parsed;
        }
    }
};
export const ensureArray = (value) => isArray(value) ? value : undefined;
export const ensureObject = (value) => isObject(value) ? value : undefined;
export const ensureLiteral = (value, literals) => literals.includes(value) ? value : undefined;
export const ensureArrayWithItems = (value, guard) => ensureArray(value)?.filter(guard);
export const ensureObjectWithProps = (value, guard) => {
    const obj = ensureObject(value);
    if (obj) {
        return Object.entries(obj).reduce((a, [k, v]) => {
            if (guard(v)) {
                a[k] = v;
            }
            return a;
        }, {});
    }
};
export const ensureItems = (value, guard) => {
    return ensureArrayWithItems(value, guard) ?? ensureObjectWithProps(value, guard);
};
