import type { RawStep, RawTestLabel, RawTestResult, RawTestStatus, RawTestStepResult } from "@allurereport/reader-api";
import type { Unknown } from "../validation.js";
import type { AllureApiCall, LabelsInputData, TargetDescriptor, TestRunArgs, TestRunCoordinates, TestRunLookup, TestRunSelector } from "./model.js";
export declare const MS_IN_S = 1000;
export declare const ALLURE_API_ACTIVITY_PREFIX = "allure.";
export declare const statusPriorities: Map<RawTestStatus, number>;
export declare const utiToMediaType: Record<string, string>;
export declare const getMediaTypeByUti: (uti: string | undefined) => string | undefined;
export declare const prependTitle: (title: string, text: string, spaces: number) => string;
export declare const getWorstStatusWithDetails: (failureSteps: readonly RawTestStepResult[]) => Pick<RawTestStepResult, "status" | "message" | "trace">;
export declare const countExpectedFailures: (failureSteps: readonly RawTestStepResult[]) => number;
export declare const resolveFailureMessage: (firstFailureMessage: string | undefined, failuresCount: number, expectedFailuresCount: number) => string | undefined;
export declare const getAggregatedFailureMessage: (message: string | undefined, failures: number, expected: number) => string;
export declare const DEFAULT_BUNDLE_NAME = "The test bundle name is not defined";
export declare const DEFAULT_SUITE_ID = "__unknown__";
export declare const DEFAULT_SUITE_NAME = "The test suite name is not defined";
export declare const DEFAULT_TEST_NAME = "The test name is not defined";
export declare const DEFAULT_STEP_NAME = "The test name is not defined";
export declare const DEFAULT_ATTACHMENT_NAME = "Attachment";
export declare const DEFAULT_EXPECTED_FAILURE_REASON = "Expected failure";
export declare const SURROGATE_DEVICE_ID: `${string}-${string}-${string}-${string}-${string}`;
export declare const SURROGATE_TEST_PLAN_ID: `${string}-${string}-${string}-${string}-${string}`;
export declare const SURROGATE_ARGS_ID: `${string}-${string}-${string}-${string}-${string}`;
export declare const getArgsKeyByValues: (values: readonly (string | undefined)[]) => string;
export declare const getArgsKey: (args: TestRunArgs) => string;
export declare const createTestRunLookup: <T>(entries: readonly (readonly [TestRunCoordinates, T])[]) => TestRunLookup<T>;
export declare const lookupTestAttempts: <T>(lookup: TestRunLookup<T>, { args, device, testPlan }: TestRunSelector) => T[] | undefined;
export declare const lookupTestAttempt: <Data>(lookup: TestRunLookup<Data>, selector: TestRunSelector) => Data | undefined;
export declare const lookupNextTestAttempt: <Data>(lookup: TestRunLookup<Data>, selector: TestRunSelector, pred: (data: Data) => boolean) => Data | undefined;
export declare const groupBy: <T, K>(values: readonly T[], keyFn: (v: T) => K) => Map<K, T[]>;
export declare const mappedGroupBy: <T, K, G>(values: readonly T[], keyFn: (v: T) => K, groupMapFn: (group: T[]) => G) => Map<K, G>;
export declare const getTargetDetails: ({ architecture, model, platform, osVersion }?: TargetDescriptor) => string | undefined;
export declare const compareChronologically: ({ start: startA, stop: stopA }: RawStep, { start: startB, stop: stopB }: RawStep) => number;
export declare const toSortedSteps: <T extends RawStep>(...stepArrays: readonly (readonly T[])[]) => T[];
export declare const secondsToMilliseconds: (seconds: Unknown<number>) => number | undefined;
export declare const parseAsAllureApiActivity: (title: string | undefined) => AllureApiCall | undefined;
export declare const splitApiCallAndValue: (text: string) => {
    apiCall: string;
    value: string;
};
export declare const applyApiCalls: (testResult: RawTestResult, apiCalls: readonly AllureApiCall[]) => void;
export declare const createTestLabels: ({ hostName, projectName, bundle, suites, className, functionName, tags, }: LabelsInputData) => RawTestLabel[];
export declare const getDefaultAttachmentName: (index: number, length: number) => string;
