import console from "node:console";
import { invokeCliTool, invokeJsonCliTool, invokeStdoutCliTool, invokeTextStdoutCliTool } from "../../toolRunner.js";
export const xcrunJson = async (utilityName, ...args) => {
    try {
        return await invokeJsonCliTool("xcrun", [utilityName, ...args], { timeout: 10000 });
    }
    catch (e) {
        console.error(e);
    }
};
export const xcrunBinary = async (utilityName, ...args) => {
    try {
        const chunks = [];
        for await (const chunk of invokeStdoutCliTool("xcrun", [utilityName, ...args], { timeout: 60000 })) {
            chunks.push(chunk);
        }
        return Buffer.concat(chunks);
    }
    catch (e) {
        console.error(e);
    }
};
export const xcresulttool = async (...args) => await xcrunJson("xcresulttool", ...args);
export const xcresulttoolBinary = async (...args) => await xcrunBinary("xcresulttool", ...args);
export const version = async () => {
    const stdout = invokeTextStdoutCliTool("xcrun", ["xcresulttool", "version"], { timeout: 10000 });
    const lines = [];
    for await (const line of stdout) {
        lines.push(line);
    }
    return lines.join("\n");
};
export const getTests = async (xcResultPath) => await xcresulttool("get", "test-results", "tests", "--path", xcResultPath);
export const getTestDetails = async (xcResultPath, testId) => await xcresulttool("get", "test-results", "test-details", "--test-id", testId, "--path", xcResultPath);
export const getTestActivities = async (xcResultPath, testId) => await xcresulttool("get", "test-results", "activities", "--test-id", testId, "--path", xcResultPath);
export const exportAttachments = async (xcResultPath, outputPath) => {
    await invokeCliTool("xcrun", [
        "xcresulttool",
        "export",
        "attachments",
        "--path",
        xcResultPath,
        "--output-path",
        outputPath,
    ]);
};
