import { ensureArray, ensureFloat, ensureInt, ensureLiteral, ensureObject, ensureString, isDefined, isObject, } from "../../../validation.js";
export const getType = ({ _type }) => isObject(_type) ? ensureString(_type._name) : undefined;
export const getUnionType = ({ _type }, options) => (isObject(_type) ? ensureLiteral(_type._name, options) : undefined);
export const getValue = (value) => {
    const obj = ensureObject(value);
    return obj ? ensureString(obj._value) : undefined;
};
export const getBool = (value) => {
    const text = getValue(value);
    return text === "true";
};
export const getInt = (value) => {
    const text = getValue(value);
    return text ? ensureInt(text) : undefined;
};
export const getDouble = (value) => {
    const text = getValue(value);
    return text ? ensureFloat(text) : undefined;
};
export const getString = (value) => getValue(value);
export const getDate = (value) => {
    const text = getValue(value);
    if (text) {
        const parsed = Date.parse(text);
        return isNaN(parsed) ? undefined : parsed;
    }
};
export const getURL = (value) => getValue(value);
export const getRef = (ref) => {
    const obj = ensureObject(ref);
    return obj ? getString(obj.id) : undefined;
};
export const getArray = (array) => {
    const arrayObject = ensureObject(array);
    return arrayObject ? (ensureArray(arrayObject._values) ?? []) : [];
};
const getValueArray = (array, getElement) => getArray(array).map(getElement).filter(isDefined);
export const getStringArray = (array) => getValueArray(array, getString);
export const getObjectArray = (array) => {
    return getArray(array).filter((v) => isObject(v));
};
