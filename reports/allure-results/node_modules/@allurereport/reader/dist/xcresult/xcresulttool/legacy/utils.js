import { isDefined } from "../../../validation.js";
export const withNewSuite = (suites, id, uri, name) => {
    return [...suites.filter(({ uri: parentUri }) => !parentUri || !uri || uri.startsWith(parentUri)), { id, uri, name }];
};
export const getTestClassFromSuites = (suites) => suites.map(({ id }) => id).join(".");
export const resolveTestStatus = (status, worstStepStatus) => {
    switch (status) {
        case "Success":
        case "Expected Failure":
            return "passed";
        case "Failure":
            return worstStepStatus === "broken" ? "broken" : "failed";
        case "Skipped":
            return "skipped";
        default:
            return "unknown";
    }
};
export const resolveFailureStepStatus = (issueType) => issueType === "Thrown Error" ? "broken" : "failed";
export const convertTraceLine = (symbolName, filename, line) => {
    if (filename === "/<compiler-generated>") {
        return undefined;
    }
    const symbolPart = symbolName ? `In ${symbolName}` : undefined;
    const locationPart = filename && isDefined(line) ? `${filename}:${line}` : filename;
    return symbolPart
        ? locationPart
            ? `${symbolName} at ${locationPart}`
            : symbolPart
        : locationPart
            ? `At ${locationPart}`
            : undefined;
};
