import { type HistoryDataPoint } from "@allurereport/core-api";
import { type Config } from "@allurereport/plugin-api";
export declare class AllureServiceClient {
    #private;
    readonly config: Config["allureService"] & {
        pollingDelay?: number;
    };
    project: string | undefined;
    constructor(config: Config["allureService"] & {
        pollingDelay?: number;
    });
    setProject(project: string): void;
    login(): Promise<string>;
    logout(): Promise<void>;
    profile(): Promise<{
        email: string;
    }>;
    projects(): Promise<{
        id: string;
        name: string;
    }[]>;
    createProject(payload: {
        name: string;
    }): Promise<{
        id: string;
        name: string;
    }>;
    deleteProject(payload: {
        name: string;
    }): Promise<{
        id: string;
        name: string;
    }>;
    appendHistory(payload: {
        history: HistoryDataPoint;
        branch?: string;
    }): Promise<unknown>;
    downloadHistory(payload?: {
        branch?: string;
    }): Promise<HistoryDataPoint[]>;
    createReport(payload: {
        reportName: string;
        reportUuid?: string;
    }): Promise<{
        url: string;
    }>;
    completeReport(payload: {
        reportUuid: string;
    }): Promise<unknown>;
    addReportAsset(payload: {
        filename: string;
        file?: Buffer;
        filepath?: string;
    }): Promise<unknown>;
    addReportFile(payload: {
        reportUuid: string;
        pluginId: string;
        filename: string;
        file?: Buffer;
        filepath?: string;
    }): Promise<string>;
}
