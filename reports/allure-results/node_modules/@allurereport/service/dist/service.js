var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AllureServiceClient_client, _AllureServiceClient_url, _AllureServiceClient_pollingDelay;
import { readFile } from "node:fs/promises";
import { join as joinPosix } from "node:path/posix";
import open from "open";
import { createServiceHttpClient } from "./utils/http.js";
import { decryptExchangeToken, deleteAccessToken, writeAccessToken, writeExchangeToken } from "./utils/token.js";
export class AllureServiceClient {
    constructor(config) {
        this.config = config;
        _AllureServiceClient_client.set(this, void 0);
        _AllureServiceClient_url.set(this, void 0);
        _AllureServiceClient_pollingDelay.set(this, void 0);
        if (!config.url) {
            throw new Error("Allure service URL is required!");
        }
        __classPrivateFieldSet(this, _AllureServiceClient_url, config.url, "f");
        __classPrivateFieldSet(this, _AllureServiceClient_client, createServiceHttpClient(__classPrivateFieldGet(this, _AllureServiceClient_url, "f"), config?.accessToken), "f");
        __classPrivateFieldSet(this, _AllureServiceClient_pollingDelay, config?.pollingDelay ?? 2500, "f");
        this.project = config?.project;
    }
    setProject(project) {
        this.project = project;
    }
    async login() {
        const exchangeToken = await writeExchangeToken();
        const connectUrl = new URL("/connect", __classPrivateFieldGet(this, _AllureServiceClient_url, "f"));
        connectUrl.searchParams.set("token", decryptExchangeToken(exchangeToken));
        await open(connectUrl.toString());
        let currentExchangeAttemptTimeout;
        return await new Promise((res) => {
            const makeExchangeAttempt = () => {
                return globalThis.setTimeout(async () => {
                    const token = decryptExchangeToken(exchangeToken);
                    const { accessToken } = await __classPrivateFieldGet(this, _AllureServiceClient_client, "f").post("/api/auth/tokens/exchange", {
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: {
                            token,
                        },
                    });
                    if (!accessToken) {
                        globalThis.clearTimeout(currentExchangeAttemptTimeout);
                        currentExchangeAttemptTimeout = makeExchangeAttempt();
                        return;
                    }
                    await writeAccessToken(accessToken);
                    return res(accessToken);
                }, __classPrivateFieldGet(this, _AllureServiceClient_pollingDelay, "f"));
            };
            currentExchangeAttemptTimeout = makeExchangeAttempt();
        });
    }
    async logout() {
        await deleteAccessToken();
    }
    async profile() {
        return __classPrivateFieldGet(this, _AllureServiceClient_client, "f").get("/api/user/profile");
    }
    async projects() {
        return __classPrivateFieldGet(this, _AllureServiceClient_client, "f").get("/api/projects/list");
    }
    async createProject(payload) {
        return __classPrivateFieldGet(this, _AllureServiceClient_client, "f").post("/api/projects/create", {
            body: payload,
        });
    }
    async deleteProject(payload) {
        return __classPrivateFieldGet(this, _AllureServiceClient_client, "f").post("/api/projects/delete", {
            body: payload,
        });
    }
    async appendHistory(payload) {
        if (!this.project) {
            throw new Error("Project is not set");
        }
        return __classPrivateFieldGet(this, _AllureServiceClient_client, "f").post("/api/history/append", {
            headers: {
                "Content-Type": "application/json",
            },
            body: {
                ...payload,
                project: this.project,
            },
        });
    }
    async downloadHistory(payload) {
        if (!this.project) {
            throw new Error("Project is not set");
        }
        return __classPrivateFieldGet(this, _AllureServiceClient_client, "f").get("/api/history/download", {
            params: {
                project: this.project,
                ...payload,
            },
        });
    }
    async createReport(payload) {
        const { reportName, reportUuid } = payload;
        if (!this.project) {
            throw new Error("Project is not set");
        }
        return __classPrivateFieldGet(this, _AllureServiceClient_client, "f").post("/api/reports/create", {
            body: {
                project: this.project,
                reportName,
                reportUuid,
            },
        });
    }
    async completeReport(payload) {
        const { reportUuid } = payload;
        if (!this.project) {
            throw new Error("Project is not set");
        }
        return __classPrivateFieldGet(this, _AllureServiceClient_client, "f").post("/api/reports/complete", {
            body: {
                id: reportUuid,
            },
        });
    }
    async addReportAsset(payload) {
        const { filename, file, filepath } = payload;
        if (!file && !filepath) {
            throw new Error("File or filepath is required");
        }
        let content = file;
        if (!content) {
            content = await readFile(filepath);
        }
        const form = new FormData();
        form.set("filename", filename);
        form.set("file", content);
        return __classPrivateFieldGet(this, _AllureServiceClient_client, "f").post("/api/assets/upload", {
            body: form,
            headers: {
                "Content-Type": "multipart/form-data",
            },
        });
    }
    async addReportFile(payload) {
        const { reportUuid, filename, file, filepath, pluginId } = payload;
        if (!file && !filepath) {
            throw new Error("File or filepath is required");
        }
        let content = file;
        if (!content) {
            content = await readFile(filepath);
        }
        const form = new FormData();
        form.set("filename", joinPosix(pluginId, filename));
        form.set("file", content);
        await __classPrivateFieldGet(this, _AllureServiceClient_client, "f").post(`/api/reports/upload/${reportUuid}`, {
            body: form,
            headers: {
                "Content-Type": "multipart/form-data",
            },
        });
        return joinPosix(__classPrivateFieldGet(this, _AllureServiceClient_url, "f"), reportUuid, filename);
    }
}
_AllureServiceClient_client = new WeakMap(), _AllureServiceClient_url = new WeakMap(), _AllureServiceClient_pollingDelay = new WeakMap();
