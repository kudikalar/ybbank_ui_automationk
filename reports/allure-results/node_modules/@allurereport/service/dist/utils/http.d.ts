import { type AxiosRequestConfig } from "axios";
export declare class KnownError extends Error {
    status?: number;
    constructor(message: string, status?: number);
}
export declare class UnknownError extends Error {
    stack?: string;
    constructor(message: string, stack?: string);
}
export declare const createServiceHttpClient: (historyServiceURL?: string, accessToken?: string) => {
    get: <T>(endpoint: string, payload?: AxiosRequestConfig & {
        params?: Record<string, any>;
        body?: any;
    }) => Promise<T>;
    post: <T>(endpoint: string, payload?: AxiosRequestConfig & {
        params?: Record<string, any>;
        body?: any;
    }) => Promise<T>;
    put: <T>(endpoint: string, payload?: AxiosRequestConfig & {
        params?: Record<string, any>;
        body?: any;
    }) => Promise<T>;
    delete: <T>(endpoint: string, payload?: AxiosRequestConfig & {
        params?: Record<string, any>;
        body?: any;
    }) => Promise<T>;
};
export type HttpClient = ReturnType<typeof createServiceHttpClient>;
