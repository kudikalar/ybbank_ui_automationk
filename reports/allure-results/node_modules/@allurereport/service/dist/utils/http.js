import axios, { AxiosError } from "axios";
import { DEFAULT_HISTORY_SERVICE_URL } from "../model.js";
import { readAccessToken } from "./token.js";
export class KnownError extends Error {
    constructor(message, status) {
        super(message);
        this.name = "KnownError";
        this.status = status;
    }
}
export class UnknownError extends Error {
    constructor(message, stack) {
        super(message);
        this.name = "UnknownError";
        this.stack = stack;
    }
}
export const createServiceHttpClient = (historyServiceURL = DEFAULT_HISTORY_SERVICE_URL, accessToken) => {
    const client = axios.create({
        baseURL: historyServiceURL,
        withCredentials: true,
        validateStatus: (status) => status < 400,
    });
    const sendRequest = (method) => async (endpoint, payload) => {
        const actualAccessToken = accessToken || (await readAccessToken());
        const headers = {
            ...(payload?.headers ?? {}),
        };
        if (actualAccessToken) {
            headers.Authorization = `Bearer ${actualAccessToken}`;
        }
        try {
            let res;
            if (payload?.body) {
                res = await client[method](endpoint, payload.body, {
                    ...payload,
                    headers,
                });
            }
            else {
                res = await client[method](endpoint, {
                    ...payload,
                    headers,
                });
            }
            return res.data;
        }
        catch (err) {
            if (!(err instanceof AxiosError)) {
                throw err;
            }
            const { status = 500 } = err.response ?? {};
            if (status < 500) {
                throw new KnownError(err.response?.data ?? err.message, status);
            }
            const { response, message, errors, stack } = err;
            throw new UnknownError(response?.data ?? errors?.[0]?.message?.trim?.() ?? message, stack);
        }
    };
    return {
        get: sendRequest("get"),
        post: sendRequest("post"),
        put: sendRequest("put"),
        delete: sendRequest("delete"),
    };
};
