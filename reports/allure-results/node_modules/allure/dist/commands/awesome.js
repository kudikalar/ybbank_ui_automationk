import { AllureReport, readConfig } from "@allurereport/core";
import { default as AwesomePlugin } from "@allurereport/plugin-awesome";
import { Command, Option } from "clipanion";
import * as console from "node:console";
import { realpath } from "node:fs/promises";
import process from "node:process";
export class AwesomeCommand extends Command {
    constructor() {
        super(...arguments);
        this.resultsDir = Option.String({ required: true, name: "The directory with Allure results" });
        this.config = Option.String("--config,-c", {
            description: "The path Allure config file",
        });
        this.cwd = Option.String("--cwd", {
            description: "The working directory for the command to run (default: current working directory)",
        });
        this.output = Option.String("--output,-o", {
            description: "The output directory name. Absolute paths are accepted as well",
        });
        this.reportName = Option.String("--report-name,--name", {
            description: "The report name",
        });
        this.singleFile = Option.Boolean("--single-file", {
            description: "Generate single file report",
        });
        this.logo = Option.String("--logo", {
            description: "Path to the report logo which will be displayed in the header",
        });
        this.theme = Option.String("--theme", {
            description: "Default theme of the report (default: OS theme)",
        });
        this.reportLanguage = Option.String("--report-language,--lang", {
            description: "Default language of the report (default: OS language)",
        });
        this.historyPath = Option.String("--history-path,-h", {
            description: "The path to history file",
        });
        this.knownIssues = Option.String("--known-issues", {
            description: "Path to the known issues file. Updates the file and quarantines failed tests when specified",
        });
        this.groupBy = Option.String("--group-by,-g", {
            description: "Group test results by labels. The labels should be separated by commas",
        });
    }
    async execute() {
        const cwd = await realpath(this.cwd ?? process.cwd());
        const before = new Date().getTime();
        const defaultAwesomeOptions = {
            singleFile: this.singleFile ?? false,
            logo: this.logo,
            theme: this.theme,
            reportLanguage: this.reportLanguage,
            groupBy: this.groupBy?.split?.(",") ?? ["parentSuite", "suite", "subSuite"],
        };
        const config = await readConfig(cwd, this.config, {
            output: this.output ?? "allure-report",
            name: this.reportName ?? "Allure Report",
            knownIssuesPath: this.knownIssues,
            historyPath: this.historyPath,
        });
        config.plugins = [
            {
                id: "awesome",
                enabled: true,
                options: defaultAwesomeOptions,
                plugin: new AwesomePlugin(defaultAwesomeOptions),
            },
        ];
        const allureReport = new AllureReport(config);
        await allureReport.start();
        await allureReport.readDirectory(this.resultsDir);
        await allureReport.done();
        const after = new Date().getTime();
        console.log(`the report successfully generated (${after - before}ms)`);
    }
}
AwesomeCommand.paths = [["awesome"]];
AwesomeCommand.usage = Command.Usage({
    category: "Reports",
    description: "Generates Allure Awesome report based on provided Allure Results",
    details: "This command generates an Allure Awesome report from the provided Allure Results directory.",
    examples: [
        ["awesome ./allure-results", "Generate a report from the ./allure-results directory"],
        [
            "awesome ./allure-results --output custom-report",
            "Generate a report from the ./allure-results directory to the custom-report directory",
        ],
    ],
});
