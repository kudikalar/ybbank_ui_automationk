import { readConfig } from "@allurereport/core";
import { AllureServiceClient, KnownError } from "@allurereport/service";
import { Command, Option } from "clipanion";
import * as console from "node:console";
import { exit } from "node:process";
import { green, red } from "yoctocolors";
import { logError } from "../utils/logs.js";
export class LoginCommand extends Command {
    constructor() {
        super(...arguments);
        this.config = Option.String("--config,-c", {
            description: "The path Allure config file",
        });
        this.cwd = Option.String("--cwd", {
            description: "The working directory for the command to run (default: current working directory)",
        });
    }
    async execute() {
        const config = await readConfig(this.cwd, this.config);
        if (!config?.allureService?.url) {
            console.error(red("No Allure Service URL is provided. Please provide it in the `allureService.url` field in the `allure.config.js` file"));
            exit(1);
            return;
        }
        const serviceClient = new AllureServiceClient(config.allureService);
        try {
            await serviceClient.login();
            console.info(green("Logged in"));
        }
        catch (error) {
            if (error instanceof KnownError) {
                console.error(red(error.message));
                exit(1);
                return;
            }
            await logError("Failed to login due to unexpected error", error);
            exit(1);
        }
    }
}
LoginCommand.paths = [["login"]];
LoginCommand.usage = Command.Usage({
    category: "Allure Service",
    description: "Logs in to the Allure Service",
    details: "This command logs in to the Allure Service using the configuration from the Allure config file.",
    examples: [
        ["login", "Log in to the Allure Service using the default configuration"],
        ["login --config custom-config.js", "Log in to the Allure Service using a custom configuration file"],
    ],
});
